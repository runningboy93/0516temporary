# Week 5 Review and Reflect

Data Structures:
1. Data structures are useful as containers for holding vast types of data from large to small and can be called on by simple variable name and the contents looped or iterated over repeatedly with a single-line command.

2. An array is essentially an ordered list. It can contain different object types and is defined by it's zero-based integer indexing allowing the value and/or location of objects to be referenced quickly and easily.It is unipolar - in the sense that each element in an array does not reference anything per se. Grocery lists or reading lists might be good uses for arrays because they're typically just an ordered list (1,2,3, etc. of items)

A hash, conversely is often referred to as an "associative array" indicating that like an array, it's a list of objects, but the associative quality indicates that each object "points" to something else. These pairings are manifest in the "key" and "value" nomenclature. Hashes allow for the retrieval of either key or value based on the other, It's also called a "dictionary" occasionally which confirms the "x references y" logic. Good uses for hashes might be a simple phrase translation table for traveling "good morning => guten tag" or expanding on the reading list, a list containing both book title and author so that you could find the author by querying the title and vice versa. Similarly if you were entering Human Resources information, you could find the social security number of a staffer by simply searching for the person.

Iteration (along with the "weaker" looping) is one of the most powerful computing tools available. It allows for the stepping up (or down) of results based on parameters passed or confining a set of code to a specific range of action (i.e. until or while loops that constrain iterations for a finite number of occasions (3.times do) or until a certain threshold is attained.). A real life example of iteration would be monitoring my daily weight and calculating a running average weight. I would need to iterate daily over the new weight and pass that into the accruing total weight and then divide by the new number of days in question. This would be only if I wanted a running average not simply the average over time. Or needing to count to 50 for a project but by 6, which doesn't roll off the tongue

A block is a small chunk of code that can be inserted into a method. It's typically single line or at least very small and they occur between do and end commands. When a method is called with a block using yield inside the method calls the block and takes a value as well. Block parameters can be provided to the call to yield that will be passed to the block. In the block, arguments (in pipes) will receive the parameters from the outside. The user decides what to call those parameters and are arbitrary and provided as needed.
